#############################
## 6. 탐색적 분석을 위한 시각화 
#############################

# 1) 명목척도(범주/서열) : 명목척도(범주/서열) 
# - 거주지역과 성별 칼럼 시각화 
resident_gender <- table(new_data$resident2, new_data$gender2)
gender_resident <- table(new_data$gender2, new_data$resident2)

# 성별에 따른 거주지역 분포 현황 
barplot(resident_gender, beside=T, horiz=T,  col = rainbow(5),
        legend = row.names(resident_gender),
        main = '성별에 따른 거주지역 분포 현황') 
# row.names(resident_gender) # 행 이름 


# 거주지역에 따른 성별 분포 현황 
barplot(gender_resident, beside=T, col=rep(c(2, 4),5), horiz=T,
        legend=c("남자","여자"),  main = '거주지역별 성별 분포 현황') 


# 2) 비율척도(연속) : 명목척도(범주/서열)
# - 나이와 직업유형에 따른 시각화 
install.packages("lattice")
library(lattice)

# 나이와 직업유형 데이터 분포  
densityplot( ~ age, data=new_data, groups = job2,
            plot.points=T, auto.key = T)
# plot.points=T : 밀도, auto.key = T : 범례 


# 3) 비율(연속),명목(범주/서열) : 명목(범주/서열)
# - 구매비용(연속) : x칼럼 , 직급(서열):조건, 성별(범주):그룹   
densityplot(~ price | factor(gender2), data=new_data, 
            groups = position2, plot.points=T, auto.key = T) 
# groups = gender2 : 한 격자에 나타날 그룹 칼럼 지정 

densityplot(~ price | factor(position2), data=new_data, 
            groups = gender2, plot.points=T, auto.key = T) 


# 4) 비율(연속)2개 : 명목 
xyplot(price ~ age | factor(gender2), data=new_data) 

#######################
## 7.파생변수 생성
#######################

# - 기존 변수로 새로운 변수 생성
# - 방법) 사칙연산 적용, 1:N 관계 -> 1:1 관계 변수 생성 
# id : 주건환경(주택,빌라,아파트,오피스텔) -> 4개의 칼럼 추가 

setwd('C:\\Rwork\\Part-II')
user_data <- read.csv('user_data.csv', header = T)
head(user_data) # user_id age house_type resident job child

# 1) 1:1 파생변수 생성 
# - 주택 유형 :  1, 아파트 유형 : 0 
summary(user_data$house_type) # NA확인 - 없음 
# 파생변수 생성 
house_type2 <- ifelse(user_data$house_type == 1 | user_data$house_type == 2, 1, 2)
# 결과 확인
user_data$house_type[1:10]
house_type2[1:10] 
# 파생변수 추가 
user_data$house_type2 <- house_type2
head(user_data)


# 2) 1:N 파생변수 생성 
pay_data <- read.csv('pay_data.csv', header = T)
head(pay_data,10) # user_id product_type pay_method  price

library(reshape2)

# (1) 고객별 상품 유형에 따른 구매금액 합계 파생변수 생성   
product_price <- dcast(pay_data, user_id ~ product_type , sum, na.rm=T) # 행 ~ 열 
head(product_price, 3) # 행(고객 id) 열(상품 타입)

class(product_price) # "data.frame"
# 칼럼명 수정 
names(product_price) <- c('user_id','product_type1','product_type2','product_type3','product_type4','product_type5')
head(product_price, 3) # 칼럼명 수정 확인 

# (2) 고객별 지불유형에 따른 구매금액 합계 파생변수 생성 
pay_price <- dcast(pay_data, user_id ~ pay_method, sum, na.rm=T) # 행 ~ 열 
head(pay_price, 3) # 행(고객 id) 열(상품 타입)

names(pay_price) <- c('user_id','pay_method1','pay_method2','pay_method3','pay_method4')
head(pay_price, 3) # 칼럼명 수정 확인 


# (3) 파생변수 추가(data.frame 합치기) 
library(plyr) # 패키지 로딩

# 형식) join(df1, df2, by='column')
user_pay_data <- join(user_data, product_price, by='user_id')
head(user_pay_data,10) # product_typeNo 파생변수 추가(NA : 해당 상품 구매이력 없음) 

user_pay_data <- join(user_pay_data, pay_price, by='user_id')
head(user_pay_data,10) # pay_methodNo 파생변수 추가 

# (4) 파생변수 대상 더미변수화(1 or 0) -> 특정 고객의 구매상품 내역을 파악할 수 있다. 
user_pay_data$product_type1 <- ifelse( user_pay_data$product_type1 > 0, 1, 0)
user_pay_data$product_type2 <- ifelse( user_pay_data$product_type2 > 0, 1, 0)
user_pay_data$product_type3 <- ifelse( user_pay_data$product_type3 > 0, 1, 0)
user_pay_data$product_type4 <- ifelse( user_pay_data$product_type4 > 0, 1, 0)
user_pay_data$product_type5 <- ifelse( user_pay_data$product_type5 > 0, 1, 0)
head(user_pay_data,30) # pay_methodNo 파생변수 추가 
# pay_methodNo 칼럼은 고객의 지불유형과 총구매액의 내역을 파악할 수 있다.


# (5) 총 구매금액 파생변수 생성(사칙연산 : 지급방법 이용) -> 전체 고객을 대상으로 우수고객을 파악할 수 있다. 
user_pay_data$total_price <- user_pay_data$pay_method1 + user_pay_data$pay_method2 + user_pay_data$pay_method3 + user_pay_data$pay_method4 
head(user_pay_data,10) # total_price 칼럼 확인

# (6) 파생변수 대상 더미변수화(1 or 0) -> 특정 고객의 지불방법 내역을 파악할 수 있다. 
user_pay_data$pay_method1 <- ifelse( user_pay_data$pay_method1 > 0, 1, 0)
user_pay_data$pay_method2 <- ifelse( user_pay_data$pay_method2 > 0, 1, 0)
user_pay_data$pay_method3 <- ifelse( user_pay_data$pay_method3 > 0, 1, 0)
user_pay_data$pay_method4 <- ifelse( user_pay_data$pay_method4 > 0, 1, 0)
head(user_pay_data,30) # 더미변수화(1 or 0) 확인  

# -------------------------------------------------------------
# <파생변수 생성 관련 연습문제>
# -------------------------------------------------------------

#####################
##  8. 표본 셈플링
#####################

# - 전체 데이터 셋을 대상으로 무작위(random)로 관측치를 추출하는 방법  

choice <- sample(c(1:100), 30) # 1~100
choice # 30개 랜덤 추출 

# 1) 행 번호 추출 
idx <- sample(1:nrow(user_pay_data),30) # 30개 무작위 추출
idx # 추출값 : 행 번호

# 2) 관측치 추출 
result <- user_pay_data[idx, ]
result

#다양한 범위를 지정해서 무작위 셈플링
choice2 <- sample(c(10:50, 70:150, 160:190),30)
choice2