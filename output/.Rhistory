dim(available.packages())
dim(available.packages())
sessionInfo()
var1 <- 0
var1 <- 0
var1 <- 1
var1
var3 <- 20
var2 <- 10
var2; var3
var2; var3
member.name <- '홍길동'
member.id <- 'hong'
member.pwd <- '1234'
member.name <- '홍길동'
age2 <- c(35,45,55)
name2 <- c('홍길동','이순신','유관순')
ages2
age2
age2
name2[2]
ls()
int <- 100
string <- 'hong gildong'
bool <- TRUE # T, FALSE=F
mode(int); mode(string); mode(bool)
is.numeric(int)
is.logical(bool)
score <- c(98,85,NA,75,65)
score
mean(score)
mean(score, na.rm = TRUE)
is.na(score)
help(mean) # help("mean")
x <- c(10,20,30,'40') # 동일한 타입 저장
x # "10" "20" "30" "40"
#x * 0.5 # Error
#숫자 형변환 (p22)
num <- as.numeric(x)
num * 0.5
num ** 0.5 # sqrt
hist(num)
name <- "강경구"
age <- 45
address <- '용인시'
# 조건2) 각 변수에 데이터 타입 보기 함수를 적용한다.
mode(name)
is.numeric(age)
gender <- c('M','F','M','F','M')
gender
plot(gender) #Erro
fgender <- as.factor(gender) #문자열 -> 요인형
fgender
plot(fgender)
str(fgender)
mode(fgender)
class(fgender)
Sys.Date()
Sys.time()
today <- '2016-11-05 11:58:05'
mode(today) # "character"
ctoday <- strptime(today,'%Y-%m-%d %H:%M:%S')
mode(ctoday)
class(ctoday)
Sys.getlocale()
Sys.setlocale(locale='English_USA') #'locale = 언어_국가"
etoday <- strptime(sdate,'%d-%b-%y')
Sys.setlocale(locale='English_USA') #'locale = 언어_국가"
etoday <- strptime(sdate,'%d-%b-%y')
#영문식 -> 한국식
sdate <- '13-Jun-16' #2016-06-13
# 다국어 정보 확인
Sys.getlocale() # "LC_COLLATE=Korean_Korea.949
Sys.setlocale(locale='English_USA') #'locale = 언어_국가"
etoday <- strptime(sdate,'%d-%b-%y')
etoday
install.packages('stringr') # 문자열 처리
str_extract_all('홍길동35이순신45','[0-9]{2}')
library(stringr) # in memory , 패키지를 메모리에 로딩
str_extract_all('홍길동35이순신45','[0-9]{2}')
str_extract_all('홍길동35이순신45','[가-히]{3}')
data()
Nile
length(Nile)
plot(Nile)
hist(Nile)
mean(10,20,30)
args(var)
example("var")
?var
getwd()
getwd()
setwd('C:\\Rwork\\Part-I')
getwd()
test <- read.csv('test.csv')
test
str(test)
data(women)
woman()
str(woman)
women()
data(women)
women()
women
str(women)
plot(women)
mode(women)
class(women)
help(women)
c(1:20)
seq(1,10,2)
rep(1:3, 3)
x <- c(1,3,5)
y <- c(3,5)
setdiff(x, y) # 차집합
intersect(x, y) # 교집합
age <- c(10,20,30)
age
names(age) <- c("홍길동", "이순신", "강감찬")
age
age <-NULL # age 변수 데이터 삭제
age[1]
age <- c(10,20,30)
names(age) <- c("홍길동", "이순신", "강감찬")
age[1]
age <-NULL # age 변수 데이터 삭제
age
a <- c(1:50) #a[1]=1,... a[50]=50
a
a[1, 2] # Error [행,열]
vec3 <- rep(vec2,each=3)
vec2 <- seq(1,10,3)
vec3 <- rep(vec2,each=3)
vec3
vec2
vec4 <-
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
vec5 <- seq(25,-15,-5)
vec5
vec6 <- vec4[seq(1,length(vec4),2)]
vec6
seq(1,length(vec4),2)
x1 <- c(5,40,50:52)
x2 <- c(30,5,6:8)
mr <- rbind(x1,x2)
mc <- cbind(x1,x2)
mode(mc); class(mc) #numeric, matrix
mc[1,] # 1행 전체
mc[,5] # 5열 전체
mc[,2] # 5열 전체
mc[2,2] #2행 2열의 데이터 1개 -> 15
mc[c(2:5),1] # 1행에서 2~5열 데이터 4개
mc[c(2:4),c(1:2)]
mc
mc[c(2:4),c(1:2)]
x <- matrix(c(1:9), nrow=3, ncol=3) # 3행 3열 matrix 객체
length(x) # 데이터 개수
ncol(x); nrow(x) # 열/행 수
x
colnames(x) <- c("one", "two", "three")
x
apply(x,1,f)
f <- function(x) {
x * c(1,2,3)
}
apply(x,1,f)
d <- c(1:12) # 12개 벡터 객체 생성
arr <- array(d, c(3,2,2)) # 3행2열2면 -> 3차원 배열 객체 생성
arr[,,1] #1면
arr[,,2] #2면
mode(arr); class(arr) #numeric, array
iris # 2차원
iris3 # 3차원
list <- list("lee","이순신",95,"hong","홍길동",85)
list
unlist <- unlist(list) # list 구조 제거 => vector로 변경
unlist
list1 <- list("lee","이순신",95,"hong","홍길동",85)
list2 <- unlist(list) # list 구조 제거 => vector로 변경
list2
num <- list(c(1:5), c(6:10))
num
num2 <- list(first=c(1:5), second=c(6:10))
num2
num2$first
num2$first[3]
member <- list(name="hong",age = 35,
address="한양",gender="남자")
member$age <- 45
member$id <- "hong"
member$pwd <- "1234"
a <- list(c(1:5))
b <- list(6:10)
lapply(c(a,b), max) # list로 결과 반환
sapply(c(a,b), max)  # vactor로 결과 반환
a;b
getwd()
setwd("C:/Rwork/Part-I")
txtemp <- read.table('emp.txt', header=T, sep="") # 제목있음, 공백구분
txtemp; class(txtemp)
csvtemp <- read.csv('emp.csv', header=T) # 제목있음, 컴마구분
csvtemp
name <- c("사번","이름","급여")
read.csv('emp2.csv', header=F, col.names=name)
name <- c("사번","이름","급여")
read.csv('emp2.csv', header=F, col.names=name)
csvtemp <- read.csv('emp.csv', header=T) # 제목있음, 컴마구분
csvtemp
csvtemp <- read.csv('emp.csv', header=T) # 제목있음, 컴마구분
csvtemp
csvtemp <- read.csv('emp.csv', header=T) # 제목있음, 컴마구분
csvtemp
csvtemp <- read.csv('emp.csv', header=T) # 제목있음, 컴마구분
csvtemp
r1 <- c(100,80,90)
r2 <- c(90,80,75)
r3 <- c(86,78,95)
Data <-data.frame(r1=r1, r2=r2, r3=r3)
apply(Data, 1, min) # 열 단위 함수 적용 - 86 78 75
apply(Data, 2, min) # 행 단위 함수 적용 - 80 75 78
apply(Data, 1, var)
apply(Data, 2, sd)
height <- data.frame(id=c(1,2), h=c(180,175))
weight <- data.frame(id=c(1,2), w=c(80,75))
user <- merge(height, weight, by.x="id", by.y="id")
user
install.packages("stringr")  # 패키지 설치
install.packages("stringr")
library(stringr) # 메모리 로딩
str_extract("abcd12aaa33", "[1-9]{2}") # "12" -> 연속된 숫자2개 추출(첫번째)
str_extract_all("abcd12aaa33", "[1-9]{2}") # "12" "33" -> 모두
d <- c("김길동","유관순","강감찬","김길동")
str_replace(d, "김길동","홍길동") # 문자열 교체
subs <- str_sub("abcd12aaa33", 3,6) # 서브스트링
subs
str_extract_all("abcd12aaa33", "[a-z]{3}") # "12" "33" -> 모두
str_extract_all("abcd12aaa33", "[a-z]{3,}") # "12" "33" -> 모두
str_extract_all("이순신12이사도라33", "[가-희]{3,4}") # "12" "33" -> 모두
email <- 'kgkang@gmail.com'
str_extract_all(email,'\\w{4,}@\\w{3}.\\w{2,}') # \\w
str_extract_all(email,'\\w{4,}@\\w{3}.\\w{2,}') # \\w
str_extract_all(email,'\\w{4,}@\\w{3,}.\\w{2,}') # \\w
jumin <- '123456-1234567'
str_extract_all(jumin,'\\d{6}-[1,2,3,4]\\d{6}' ) #\\d
Data2 <- c("2016-06-05 수입3000원","2016-06-06 수입4500원","2016-06-07 수입2500원")
income <- str_extract_all(Data2, '\\d{4}원')
income
income <- unlist(income)
income
str_replace_all(Data2,'\\d{2,}',)
str_replace_all(Data2,'\\d{2,}','')
str_replace_all(Data2, '-', '/')
paste(Data2,collapse = ",")
x <- scan()
x
sum <- sum(x)
sum
y <- scan(what="")
y
df = data.frame() #빈 데이터프레임 생성
df = edit(df) # 데이터 편집기
df
getwd()
setwd("C:/Rwork/Part-I")
student  <- read.table(file="student.txt")
student
student1  <- read.table(file="student1.txt", header=TRUE)
student1
student2  <- read.table(file="student2.txt", sep=";", header=TRUE) # 세미콜론
student2
student3<-read.table(file="student3.txt", sep=" ",
header=TRUE, na.strings="-")
student3
h <- student3$키
mean(h, na.rm = T)
mean(w, na.rm = T)
h <- student3$키
w <- student3$몸무게
mean(h, na.rm = T)
mean(w, na.rm = T)
Sys.setenv(JAVA_HOME='C:\Rutil\Java\jre1.8.0_111')
install.packages("rJava")
library(rJava) # 로딩
install.packages("xlsx")
library(xlsx) # 로딩
studentex <- read.xlsx(file.choose(),
sheetIndex=1, encoding="UTF-8")
studentex
studentex <- read.xlsx(file.choose(),
sheetIndex=1, encoding="UTF-8")
studentex
install.packages("XML")
library(XML)
info.url <- "http://www.infoplease.com/ipa/A0104652.html"
info.df<-readHTMLTable(info.url, header=T, which=1, stringsAsFactors=F)
info.df
info.df<-info.df[1:53,] # NA 레코드 제거(54행 제거)
info.df
info.df<-info.df[c(-2,-28),] # $가 있는 행 제거
info.df<-info.df[c(-2,-28),] # $가 있는 행 제거
info.df<-info.df[c(-1,-2),] # 1,2행 제거
info.df
names(info.df) <- c("State",'y1980','y1990','y1995','y2000','y2003','y2006','y2009','y2012','y2015')
head(info.df)
setwd("C:/Rwork/")
write.csv(info.df, 'info.csv', row.names = F)
finfo <- read.csv('info.csv', header = T)
finfo
library(stringr)
str(finfo)
y2015 <- finfo$y2015
y2015_r <- str_replace_all(y2015,',','')
y2015
y2015_r
y2015_n <- as.numeric(y2015_r)
y2015_n
mean(y2015_n)
sum(y2015_n)
y2015_10 <- y2015_n[1:15]
y2015_10
barplot(y2015_10, main="주요 15개주 2015년 1인당 소득",
col=rainbow(15))
state <- finfo$State
state15 <- state[1:15]
barplot(y2015_10, main="주요 15개주 2015년 1인당 소득",
col=rainbow(15),
names.arg = state15)
setwd("C:/Rwork/output")
sink("savework.txt") # 저장할 파일명 - 장치 열기
studentx <- read.xlsx(file.choose(), sheetIndex=1, encoding="UTF-8")
studentx #출력되는 값이 화면에 나타나지 않고 파일에 저장됨
sink() # 해제 - 장치 닫기
write.table(studentx, "stdt.txt")
write.table(studentx, "stdt2.txt", row.names=FALSE)
write.table(studentx, "stdt3.txt", row.names=FALSE, quote=FALSE)
library(xlsx) # excel data 입출력 함수 제공
st.df <- read.xlsx(file.choose(), sheetIndex=1, encoding="UTF-8")
str(st.df)
write.xlsx(st.df, "studentx.xlsx") # excel형식으로 저장
setwd("C:/Rwork/output")
st.df
write.csv(st.df,"stdf.csv", row.names=F, quote=F) # 행 이름 제거
info.df
setwd("C:/Rwork/output")
write.csv(info.df, "info.csv")
finfo.df = read.csv("info.csv")
finfo.df
setwd("C:/Rwork/output")
write.csv(info.df, "info.csv",row.names=F)
finfo.df = read.csv("info.csv")
std(finfo.df)
finfo.df
str(finfo.df)
head(finfo.df[,-c(2:3)])
