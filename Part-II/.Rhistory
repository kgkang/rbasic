price <-c(50,65,45,75)
client <- data.frame(name,gender,price)
result <- ifelse(client$price, "Best", "Normal")
result
result <- ifelse(client$price>=65, "Best", "Normal")
result
args(result)
args(table)
client$result <- result
help(table)
fact <- as.factor(result)
fact
client$gender2 <- ifelse(client$gender==M,"Male","Female")
client$gender2 <- ifelse(client$gender=="M","Male","Female")
client$gender2
table(result)
table(client$gender2)
table(client$result)
f3 <- function(x,y) {
add <- x + y
return(add) #반환
}
f3(10,20)
cat('result =', result)
result <- f3(10,20)
cat('result =', result)
var_sd <- function(x) {
#분산 = sum((x-평균)^2 ) / (n-1)
var <- sum((x-mean(x))^2) / (length(x)-1)
sd <- sqrt(var)
cat('분산 = ', var, "\n")
cat('표준편차 =', sd)
}
var_sd <- function(x) {
#분산 = sum((x-평균)^2 ) / (n-1)
var <- sum((x-mean(x))^2) / (length(x)-1)
sd <- sqrt(var)
cat('분산 = ', var, '\n')
cat('표준편차 =', sd)
}
var_sd(x)
x <- c(7,15,5,9,6)
var(x)
sd(x)
sqrt(var(x))
var_sd <- function(x) {
#분산 = sum((x-평균)^2 ) / (n-1)
var <- sum((x-mean(x))^2) / (length(x)-1)
sd <- sqrt(var)
cat('분산 = ', var, '\n')
cat('표준편차 =', sd)
}
var_sd(x)
library(stringr)
str <- '($124,512)'
str2 <- str_replace_all(str, '\\,|\\(|\\)|\\$','')
num <- as.numeric(str2)
num * 100
str_pro <- function(str) {
str2 <- str_replace_all(str, '\\,|\\(|\\)|\\$','')
num <- as.numeric(str2)
return(num)
}
print(str_pro(str))
info <- read.csv('C:\Rwork\output\info.csv', header=T)
info <- read.csv('C:/Rwork/output/info.csv', header=T)
head(info)
str(info)
str(info)
state <- info$State
num_col <- info[2:10]
head(num_col)
num_result <- apply(num_col,2,str_pro)
info_result = cbind(state,num_result)
class(info_result)
head(info_result)
num_result
state <- info[1]
num_col <- info[2:10]
head(num_col)
num_result <- apply(num_col,2,str_pro)
info_result = cbind(state,num_result)
class(info_result)
head(info_result)
seq(-2, 2, by=.2) # 0.2씩 증가
seq(length=10, from=-5, by=.2) # -5부터 10개 생성
rnorm(20, mean = 0, sd = 1) # 정규분포를 따르는 20개 데이터 생성
runif(20, min=0, max=100) # 0~100사이의 20개 난수 생성
sample(0:100, 20) # 0~100사이의 20개 sample 생성
vec<-1:10
min(vec)
max(vec)
range(vec)
mean(vec) # 평균
median(vec) # 중위수
sum(vec)
prod(vec) # 데이터의 곱
factorial(5) # 팩토리얼=120
abs(-5)  # 절대값
sd(rnorm(10)) # 표준편차 구하기
table(vec) # 빈도수
sqrt(16) # 4
4^2 # 16
5%%3 # 2
6%%2 # 0
getwd()
setwd("c:/Rwork/Part-I")
excel <- read.csv("excel.csv", header=TRUE)
head(excel,10)
colMeans(excel[1:5])
summary(excel)
colSums(excel[1:5])
install.packages("RSADBE")
library(RSADBE)
help("RSADBE") # Package 정보제공
data(Severity_Counts) # RSADBE 패키지 제공 데이터셋
str(Severity_Counts)
Severity_Counts # 버그 측정 데이터 셋
barplot(Severity_Counts, ylim=c(0,12000),
col=rainbow(10), main ="소프트웨어 버그 측정 결과(BR/AR)",
font.main=4)
?barchart
?barplot
barplot(Severity_Counts,xlab="Bug Count", xlim=c(0,12000),
horiz=T, col=rainbow(10)) # 10가지 무지개 색
barplot(Severity_Counts,xlab="Bug Count", xlim=c(0,12000),
horiz=T, col=rep(c(2, 4),5)) # red와 blue 색상 5회 반복
barplot(Severity_Counts,xlab="Bug Count", xlim=c(0,12000),
horiz=T, col=rep(c(1, 7),5))
data(Bug_Metrics_Software) # RSADBE 패키지 제공 데이터셋
Bug_Metrics_Software # 행렬 구조 - 1면(Before)과 2면(After) 구성
par(mfrow=c(1,2)) # 1행 2열 그래프 보기
barplot(Bug_Metrics_Software[,,1], beside=T,
col=c("lightblue","mistyrose","lightcyan","lavender","cornsilk"),
legend=c("JDT","PDE","Equinox","Lucene","Mylyn"))
barplot(Bug_Metrics_Software[,,1], beside=T,
col=c("lightblue","mistyrose","lightcyan","lavender","cornsilk"),
legend=c("JDT","PDE","Equinox","Lucene","Mylyn"))
title(main ="Before Release Bug Frequency",font.main=4)
barplot(Bug_Metrics_Software[,,2], beside=F,
col=c("lightblue","mistyrose","lightcyan","lavender","cornsilk"),
legend=c("JDT","PDE","Equinox","Lucene","Mylyn"))
title(main ="After Release Bug Frequency", font.main=4)
par(mfrow=c(1,2)) # 1행 2열 그래프 보기
barplot(Bug_Metrics_Software[,,1], beside=T,
col=c("lightblue","mistyrose","lightcyan","lavender","cornsilk"),
legend=c("JDT","PDE","Equinox","Lucene","Mylyn"))
title(main ="Before Release Bug Frequency",font.main=4)
barplot(Bug_Metrics_Software[,,2], beside=F,
col=c("lightblue","mistyrose","lightcyan","lavender","cornsilk"),
legend=c("JDT","PDE","Equinox","Lucene","Mylyn"))
title(main ="After Release Bug Frequency", font.main=4)
par(mfrow=c(1,1)) # 1행 1열 그래프 보기
dotchart(Severity_Counts, col=9:10, lcolor="black", pch=1:2,
labels=names(Severity_Counts),
main="Dot Plot for the Before and After", cex=1.2)
class(Severity_Counts) # "numeric"
par(mfrow=c(1,2)) # 1행 2열 그래프 보기
pie(Severity_Counts[c(1,3,5,7,9)]) # Bugs.BR
title("Before Release Bug Frequency")
pie(Severity_Counts[c(2,4,6,8,10)]) # Bugs.AR
title("After Release Bug Frequency")
class(Severity_Counts) # "numeric"
par(mfrow=c(1,2)) # 1행 2열 그래프 보기
pie(Severity_Counts[c(1,3,5,7,9)]) # Bugs.BR
title("Before Release Bug Frequency")
pie(Severity_Counts[c(2,4,6,8,10)]) # Bugs.AR
title("After Release Bug Frequency")
library(RSADBE)
data(resistivity) # RSADBE패키지에서 제공하는 데이터셋
class(resistivity)
resistivity
boxplot(resistivity, range=0) # 두 Process 상자 그래프 시각화
install.packages("psych")
library(psych)
galton # psych 패키지 제공 데이터 셋
data(galton) # 자식과 부모의 키 사이의 관계
par(mfrow=c(1,2))
hist(galton$parent,breaks="FD", xlab="Height to Parent",
main="Histogram for Parent Height with Freedman-Diaconis",
xlim=c(60,75))
hist(galton$parent,breaks="Sturges", xlab="Height to Parent",
main="Histogram for Parent Height with Sturges",
xlim=c(60,75))
hist(galton$child, xlab="Height to Child",
main="Histogram for Child Height with Freedman-Diaconis",
xlim=c(60,75), col="mistyrose")
hist(galton$child, xlab="Height to Child",
main="Histogram for Child Height with Sturges",
xlim=c(60,75), col="magenta")
price<- runif(10, min=1, max=100) # 난수 발생
plot(price)
par(mfrow=c(2,2)) # 2행 2열 차트 그리기
plot(price, type="l") # 유형 : 실선
plot(price, type="o") # 유형 : 원형과 실선
plot(price, type="h") # 직선
plot(price, type="s") # 꺾은선
plot(price, type="o", pch=5) # 빈 사각형
plot(price, type="o", pch=15)# 채워진 마름모
plot(price, type="o", pch=20, col="blue")
plot(price, type="o", pch=20, col="orange", cex=1.5)
plot(price, type="o", pch=20, col="green", cex=2.0, lwd=3)
methods(plot)
head(galton)
model <- lm(child~parent,  data=galton) #lm(종속변수~독립변수)
plot(model)
par(mfrow=c(1,1)) # 1행 1열 차트 그리기
plot(model)
par(mfrow=c(1,1))
plot(child~parent, data=galton) # y ~ x
out = lm(child~parent, data=galton)
abline(out, col="red")
x <- c(1:4,2,4)
y <- rep(2,6)
x;y
plot(x,y)
table(x,y)
xy_df <- data.frame(table(x,y))
xy_df
plot(xy_df$x,xy_df$y, cex = 0.5*xy_df$Freq)
plot(y~x, cex = 0.8*xy_df$Freq,pch='@',col='red')
library(psych)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData)=c("child","parent", "freq") # 컬럼명 지정
parent <- as.numeric(as.vector(freqData$parent))
child <- as.numeric(as.vector(freqData$child))
plot(child~parent, pch=21, col="blue", bg="green",
cex=0.15*freqData$freq, xlab="parent", ylab="child")
data(iris)
pairs(iris[,1:4]) # Sepal.Length Sepal.Width Petal.Length Petal.Width
iris[iris$Species=="virginica", 1:4]
pairs(iris[iris$Species=="virginica", 1:4])
pairs(iris[iris$Species=="setosa", 1:4])
setwd("C:/Rwork/Part-II") # 폴더 지정
jpeg("galton.jpg", width=720, height=480) # 픽셀 지정 가능
plot(child~parent, data=galton) # y ~ x
title(main="부모와 자식의 키 유전관계")
out = lm(child~parent, data=galton)
abline(out, col="red")
dev.off() # 장치 종료
data(iris)
iris
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris$Sepal.Length, iris$Petal.Length,col=iris$Species)
setwd("C:/Rwork/Part-II") # 폴더 지정
jpeg("iris.jpg", width=720, height=480) # jpg 장치 open, 픽셀 지정 가능
plot(iris$Sepal.Length, iris$Petal.Length,col=iris$Species)
title(main="iris 데이터 테이블 산포도 차트")
dev.off() # 장치 종료
install.packages("DBI")
install.packages("RJDBC") # JDBC()함수 제공
library(DBI)
Sys.setenv(JAVA_HOME='C:\\Rutil\\Java\\jre1.8.0_111')
library(rJava)
library(RJDBC) # rJava에 의존적이다.
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\Rutil\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/work", "kkg", "kkg")
dbListFields(conn, "goods") # conn, table name
goods.db<- dbReadTable(conn, "goods")
goods.db
query = "select * from goods"
goodsAll <- dbGetQuery(conn, query)
goodsAll
query = "select * from goods where su >= 3"
goodsOne <- dbGetQuery(conn, query)
goodsOne
query = "SELECT * FROM goods order by dan desc"
dbGetQuery(conn, query)
query <- "insert into goods values(5,'가스레인지',2,350000)"
dbSendUpdate(conn, query)
dbGetQuery(conn,"select * from goods")
query = "update goods set name = 'gas range' where code=5"
dbSendUpdate(conn, query)
dbGetQuery(conn,"select * from goods")
query = "delete from goods where code=5"
dbSendUpdate(conn, query)
dbGetQuery(conn,"select * from goods")
dbDisconnect(conn)
install.packages('plyr')
library(plyr) # 패키지 로딩
x = data.frame(ID = c(1,2,3,4,5), height = c(160,171,173,162,165))
y = data.frame(ID = c(5,4,1,3,2), weight = c(55,73,60,57,80))
x;y
z <- join(x,y,by='ID') # ID컬럼으로 조인
z
x = data.frame(ID = c(1,2,3,4,6), height = c(160,171,173,162,180))
y = data.frame(ID = c(5,4,1,3,2), weight = c(55,73,60,57,80))
z <- join(x,y,by='ID') # ID컬럼으로 left 조인(왼쪽 변수 기준)
z
z <- join(x,y,by='ID', type='inner') # type='inner' : 값이 있는 것만 조인
z
z <- join(x,y,by='ID', type='full') # type='full' : 모든 항목 조인
z
tapply(iris$Sepal.Length, iris$Species, mean)
table(iris$Species)
tapply(iris$Sepal.Width, iris$Species, sum)
a <- ddply(iris,
.(Species),
summarise,
avg = mean(Sepal.Length))
a
a <- ddply(iris,
.(Species),
summarise,
avg = mean(Sepal.Length),
tot = sum(Sepal.Length),
var = var(Sepal.Length))
a
data(mtcars)
str(mtcars)
a <- ddply(mtcars, .(cyl), avg=mean(mtcars.mpg), var=var(mtcars.mpg))
a
a <- ddply(mtcars, .(cyl), summarise,avg=mean(mtcars.mpg), var=var(mtcars.mpg))
a
a
a <- ddply(mtcars, .(cyl), summarise,avg=mean(mtcars.mpg), var=var(mtcars.mpg))
a <- ddply(mtcars, .(cyl), summarise,avg=mean(mpg), var=var(mpg))
a
a <- ddply(mtcars, .(cyl, gear), summarise,avg=mean(mpg), var=var(mpg))
a
table(mtcars.cyl)
table(mtcars,cyl)
table(mtcars$cyl)
table(mtcars$gear)
install.packages(c("dplyr", "hflights"))
library(dplyr) # 함수 사용
library(hflights) # dataset 사용
dim(hflights)
str(hflights)
hflights
hflights_df <- tbl_df(hflights)
hflights_df
hflights_df
hflights_df
filter(hflights_df, Month == 1, DayofMonth == 1)
filter(hflights_df, Month == 1 | Month == 2)
arrange(hflights_df, Year, Month, ArrTime )
arrange(hflights_df, desc(Month))
filter(hflights_df, Month == 1, DayofMonth == 1)
arrange(hflights_df, Year, Month, ArrTime )
arrange(hflights_df, desc(Month))
select(hflights_df, Year, Month, DayOfWeek)  # 3개 칼럼 선택
select(hflights_df, Year:DayOfWeek)
select(hflights_df, -(Year:DayOfWeek))
mutate(hflights_df, gain = ArrDelay - DepDelay,
gain_per_hour = gain/(AirTime/60))
select(mutate(hflights_df, gain = ArrDelay - DepDelay,
gain_per_hour = gain/(AirTime/60)),
Year, Month, ArrDelay, DepDelay,gain, gain_per_hour)
summarise(hflights_df, cnt = n(), delay = mean(DepDelay, na.rm = TRUE))
planes <- group_by(hflights_df, TailNum) # TailNum : 항공기 일련번호
planes
planesInfo <- summarise(planes, count = n(),
dist=mean(Distance, na.rm=T),
delay=mean(ArrDelay, na.rm = T))
planesInfo
planes
hflights_df
result <- filter(planesInfo, count > 20, dist < 2000)
result
filter(result, dist>=1 & delay>=1)
install.packages('reshape2')
library(reshape2)
data <- read.csv("c:/Rwork/Part-II/data.csv")
data
wide <- dcast(data, Customer_ID ~ Date, sum)
wide
rowSums(wide) # 행 합계 -> 고객별
colSums(wide) # 열 합계 -> 날짜별
wide <- cbind(wide, rowSums(wide)) # 컬럼으로 행 합계 붙임
wide <- rbind(wide, colSums(wide)) # 행으로 컬럼 합계 붙임
wide
colnames(wide)
colnames(wide)[9] <- 'Sum by User' # 9번째 컬럼명 변경
data("smiths")
smiths
long <- melt(id=1:2, smiths) # id:기준 칼럼
long
dcast(long, subject + time~...)
setwd("C:/Rwork/Part-II")
dataset <- read.csv("dataset.csv", header=TRUE) # 헤더가 있는 경우
print(dataset)
View(dataset) # 뷰어창 출력
head(dataset)
tail(dataset)
names(dataset) # 변수명(컬럼)
attributes(dataset) # names(), class, row.names
str(dataset) # 데이터 구조보기
dataset$age
dataset$resident
length(dataset$age) # data 수-300개
x <- dataset$gender # 조회결과 변수 저장
y <- dataset$price
x;y
plot(dataset$price) # 산점도 : 전반적인 가격분포 보기
dataset["gender"]
dataset["price"]
dataset[2] # 두번째 컬럼
dataset[6] # 여섯번째 컬럼
dataset[3,] # 3번째 관찰치(행) 전체
dataset[,3] # 3번째 변수(열) 전체
dataset[c("job","price")]
dataset[c(2,6)]
dataset[c(1,2,3)]
dataset[c(1:3)]
dataset[c(2,4:6,3,1)]
summary(dataset$price)
sum(dataset$price) # NA 출력
sum(dataset$price, na.rm=T) # 2362.9
summary(dataset$price)
sum(dataset$price) # NA 출력
sum(dataset$price, na.rm=T) # 2362.9
price2 <- na.omit(dataset$price)
sum(price2) # 2362.9
length(price2) # 270 -> 30개 제거
x <- dataset$price # price vector 생성
x[1:30] # 5.1 4.2 4.7 3.5 5.0
dataset$price2 = ifelse( !is.na(x), x, 0) # 평균으로 대체
dataset$price2[1:30]
x <- dataset$price # price vector 생성
x[1:30] # 5.1 4.2 4.7 3.5 5.0
dataset$price3 = ifelse(!is.na(x), x, round(mean(x, na.rm=TRUE), 2) ) # 평균으로 대체
dataset$price3[1:30]
dataset[c('price', 'price2', 'price3')]
gender <- dataset$gender
gender
hist(gender) # 히스토그램
table(gender) # 빈도수
pie(table(gender)) # 파이 차트
dataset <- subset(dataset, gender==1 | gender==2)
dataset # gender변수 데이터 정제
length(dataset$gender) # 297개 - 3개 정제됨
pie(table(dataset$gender))
dataset$price # 세부데이터 보기
length(dataset$price) #300개(NA포함)
plot(dataset$price) # 산점도
summary(dataset$price) # 범위확인
dataset2 <- subset(dataset, dataset$price >= 2 & dataset$price <= 10)
length(dataset2$price)
stem(dataset2$price) # 줄기와 잎 도표보기
dataset2$resident2[dataset2$resident == 1] <-'1.서울특별시'
dataset2$resident2[dataset2$resident == 2] <-'2.인천광역시'
dataset2$resident2[dataset2$resident == 3] <-'3.대전광역시'
dataset2$resident2[dataset2$resident == 4] <-'4.대구광역시'
dataset2$resident2[dataset2$resident == 5] <-'5.시구군'
dataset2[c("resident","resident2")] # 2개만 지정
dataset2$job2[dataset2$job == 1] <- '공무원'
dataset2$job2[dataset2$job == 2] <- '회사원'
dataset2$job2[dataset2$job == 3] <- '개인사업'
dataset2[c('job','job2')]
head(dataset2[c('job','job2')])
dataset2$age2[dataset2$age <= 30] <-"청년층"
dataset2$age2[dataset2$age > 30 & dataset2$age <=55] <-"중년층"
dataset2$age2[dataset2$age > 55] <-"장년층"
head(dataset2)
dataset2$survey
survey <- dataset2$survey
csurvey <- 6-survey # 역코딩
csurvey
survey  # 역코딩 결과와 비교
dataset2$survey <- csurvey # survery 수정
head(dataset2) # survey 결과 확인
setwd("C:/Rwork/Part-II")
write.csv(dataset2,"cleanData.csv", quote=F, row.names=F)
new_data <- read.csv("cleanData.csv", header=TRUE)
new_data
dim(new_data) # 248  13
new_data
dim(new_data) # 248  13
new_data <- subset(new_data, !is.na(new_data$resident))
new_data
summarise(new_data$resident)
summarise(new_data$resident)
new_data <- subset(new_data, !is.na(new_data$resident))
summarise(new_data$resident)
summary(new_data$resident)
new_data$gender2[new_data$gender == 1] <- '남자'
new_data$gender2[new_data$gender == 2] <- '여자'
pie(new_data$gender2)
pie(table(new_data$gender2))
new_data$age3[new_data$age<=30] <- 1
new_data$age3[new_data$age>=31 & new_data$age<=55] <- 2
new_data$age3[new_data$age>=56] <- 3
head(new_data[c(age,age2,age3)])
head(new_data[c('age','age2','age3')])
resident_gender <- table(new_data$resident2, new_data$gender2)
gender_resident <- table(new_data$gender2, new_data$resident2)
barplot(resident_gender, beside=T, horiz=T,  col = rainbow(5),
legend = row.names(resident_gender),
main = '성별에 따른 거주지역 분포 현황')
resident_gender
table(new_data$gender2)
gender_resident
barplot(gender_resident, beside=T, col=rep(c(2, 4),5), horiz=T,
legend=c("남자","여자"),  main = '거주지역별 성별 분포 현황')
library(ggplot2)
install.packages("ggmap") # ‘ggmap’와 ‘ggplot2’(우선 설치) 관련 패키지
library(ggmap)
gc<- geocode("seoul, korea", source="google") # geolocation API 이용
center <- as.numeric(gc)
center # 위도,경도
map <- get_googlemap(center = center, language="ko-KR", color = "bw", scale = 2 )
ggmap(map, extent = 'device')
df <- round(data.frame( x = jitter(rep(-95.36, 25), amount = .3),
y = jitter(rep(29.76, 25), amount = .3) ), digits = 2)
map <- get_googlemap('houston', markers = df, scale = 2)
ggmap(map, extent = 'device')
map <- get_map(location ="london", zoom=14, maptype='roadmap', scale=2)
ggmap(map, size=c(600,600), extent='device')
map <- get_googlemap(center = center, language="ko-KR", color = "bw", scale = 2 )
ggmap(map, extent = 'device')
